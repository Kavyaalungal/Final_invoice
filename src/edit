import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { TextField, Button, Grid, Box, Typography, FormControl, InputLabel, Select, MenuItem } from '@mui/material';
import Navbar from './Navbar';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

function Edit() {
  const [labNo, setLabNo] = useState('');
  const [branchId, setBranchId] = useState('');
  const [yearId, setYearId] = useState('');
  const [prefix, setPrefix] = useState('');
  const [name, setName] = useState('');
  const [day, setDay] = useState('');
  const [month, setMonth] = useState('');
  const [year, setYear] = useState('');
  const [gender, setGender] = useState('');
  const [dob, setDob] = useState('');
  const [age, setAge] = useState('');
  const [email, setEmail] = useState('');
  const [phone1, setPhone1] = useState('');
  const [phone2, setPhone2] = useState('');
  const [nationality, setNationality] = useState('');
  const [address, setAddress] = useState('');
  const [invoiceData, setInvoiceData] = useState(null);
  const [error, setError] = useState(null);
  const [isDataUpdated, setIsDataUpdated] = useState(false);
  const [isEmailValid, setIsEmailValid] = useState(true); // State to track email validation
  const [isPhone1Valid, setIsPhone1Valid] = useState(true);
  const [isPhone2Valid, setIsPhone2Valid] = useState(true);

  useEffect(() => {
    setIsDataUpdated(prefix !== (invoiceData?.Inv_Tittle || '') ||
      name !== (invoiceData?.Inv_name || '') ||
      day !== (invoiceData?.Inv_ageDD || '') ||
      month !== (invoiceData?.Inv_ageMM || '') ||
      year !== (invoiceData?.Inv_ageYY || '') ||
      gender !== (invoiceData?.Inv_Gender || '') ||
     phone1 !== (invoiceData?.Inv_phno || '') ||
       phone2 !== (invoiceData?.Inv_Mob || '') ||
       email !== (invoiceData?.Inv_Email || '') ||
        nationality !== (invoiceData?.Inv_Nationality || '')||
        address !== (invoiceData?.Inv_Address || ''));
  }, [prefix,name,day,month,year,gender, phone1,phone2,email,nationality,address, invoiceData]);

  // Function to validate email using regex
  const validateEmail = (email) => {
    const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return regex.test(email);
  };

  const validatePhone = (phone) => {
    const regex = /^[0-9]{10}$/;
    return regex.test(phone);
  };
  const fetchData = async () => {
    try {
      const response = await axios.get(`http://172.16.16.10:8082/api/EditInvoice`, {
        params: {
          LabNo: labNo,
          YearId: yearId,
          BranchId: branchId,
        },
      });
      setInvoiceData(response.data.invoiceDtls);
      const validPrefixes = ['', 'Mr', 'Mrs', 'Ms', 'Miss'];
      setPrefix(validPrefixes.includes(data.Inv_Tittle) ? data.Inv_Tittle : '');
      setName(response.data.invoiceDtls.Inv_name || '');
      setDay(response.data.invoiceDtls.Inv_ageDD || '');
      setMonth(response.data.invoiceDtls.Inv_ageMM || '');
      setYear(response.data.invoiceDtls.Inv_ageYY || '');
      const validGender = ['', 'M', 'F', 'O'];
      setGender(validGender.includes(data.Inv_Gender) ? data.Inv_Gender : '');
      setEmail(response.data.invoiceDtls.Inv_Email || '');
      setPhone1(response.data.invoiceDtls.Inv_phno || '');
      setPhone2(response.data.invoiceDtls.Inv_Mob || '');
      setNationality(response.data.invoiceDtls.Inv_Nationality || '');
      setAddress(response.data.invoiceDtls.Inv_Address || '');
    } catch (error) {
      setError(error.message);
    }
  };

  const saveDataToAPI = () => {
    // Check if email is filled and validate email format
    if (email && !validateEmail(email)) {
      setIsEmailValid(false);
      return;
    }

     // Check if phone1 is filled and validate phone number format
  if (phone1 && !validatePhone(phone1)) {
    setIsPhone1Valid(false);
    return;
  }

  // Check if phone2 is filled and validate phone number format
  if (phone2 && !validatePhone(phone2)) {
    setIsPhone2Valid(false);
    return;
  }

    axios.post('http://172.16.16.10:8082/api/EditInvSave', {
      ...invoiceData,
      Inv_Tittle:prefix,
      Inv_name: name,
      Inv_ageDD:age,
      Inv_ageMM:month,
      Inv_ageYY:year,
      Inv_Gender:gender,
      Inv_Email: email,
      Inv_phno: phone1,
      Inv_Mob : phone2,
      Inv_Nationality:nationality,
      Inv_Address:address,
      
    })
      .then(response => {
        console.log('Data saved successfully:', response.data);
        toast.success('Data updated successfully!');
        console.log('Updated prefix:', prefix); // Show success message
        console.log('Updated Name:', name);
        console.log('Updated Email:', email);
        console.log('Updated phone1:', phone1);
        console.log('Updated phone1:', phone2);
        console.log('Updated address:', address);
        console.log('Updated nationality:', nationality);
        
      })
      .catch(error => {
        console.error('Error saving data:', error);
        toast.error('Error saving data.'); 
      });
  };

  return (
    <Box className="edit-invoice-container">
      <Navbar />
      <Box className="navbar">
        <Typography variant="h4" className="navbar-heading">Edit Invoice</Typography>
        <Box className="navbar-buttons">
          <Button variant="contained" color="primary" className="navbar-button" >NEW</Button>
          <Button variant="contained" color="secondary" className="navbar-button" onClick={saveDataToAPI} disabled={!isDataUpdated}>SAVE</Button>
          <Button variant="contained" color="default" className="navbar-button">EXIT</Button>
        </Box>
      </Box>
      <Box className="fieldset">
        <Grid container spacing={3} alignItems="center">
          <Grid item xs={12} sm={6}>
            <TextField
              id="labNo"
              label="Lab No"
              variant="outlined"
              size="small"
              fullWidth
              value={labNo}
              onChange={(e) => setLabNo(e.target.value)}
              InputLabelProps={{ style: { fontSize: '14px' } }}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              id="branchId"
              label="Branch Id"
              variant="outlined"
              size="small"
              fullWidth
              value={branchId}
              onChange={(e) => setBranchId(e.target.value)}
              InputLabelProps={{ style: { fontSize: '14px' } }}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              id="yearId"
              label="Year Id"
              variant="outlined"
              size="small"
              fullWidth
              value={yearId}
              onChange={(e) => setYearId(e.target.value)}
              InputLabelProps={{ style: { fontSize: '14px' } }}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <Button variant="contained" color="primary" onClick={fetchData}>
              Search
            </Button>
          </Grid>
        </Grid>
      </Box>
      {error && <Typography variant="body2" color="error">{error}</Typography>}
      {invoiceData && (
        <Box className="fieldset">
          <Grid container spacing={3} alignItems="center">
          <Grid item xs={12} sm={2}>
              <FormControl variant="outlined" size="small" fullWidth>
                <InputLabel id="prefixLabel">Prefix</InputLabel>
                <Select
                  labelId="prefixLabel"
                  id="prefix"
                  value={prefix}
                  onChange={(e) => setPrefix(e.target.value)}
                  label="Prefix"
                >
                  <MenuItem value=""><em>None</em></MenuItem>
                  <MenuItem value="Mr">Mr</MenuItem>
                  <MenuItem value="Mrs">Mrs</MenuItem>
                  <MenuItem value="Ms">Ms</MenuItem>
                  <MenuItem value="Miss">Miss</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12} sm={10}>
              <TextField
                id="name"
                label="Name"
                variant="outlined"
                size="small"
                fullWidth
                value={name}
                onChange={(e) => setName(e.target.value)}
                InputLabelProps={{ style: { fontSize: '14px' } }}
              />
            </Grid>
            <Grid item xs={12} sm={1}>
    <Typography variant="body1" gutterBottom>
      Age
    </Typography>
  </Grid>
  <Grid item container xs={12} sm={7} spacing={1}>
    <Grid item xs={3}>
      <TextField
        id="dd"
        label="Day"
        variant="outlined"
        size="small"
        fullWidth
        value={day}
        onChange={(e) => setDay(e.target.value)}
        InputLabelProps={{ style: { fontSize: '14px' } }}
      />
    </Grid>
    <Grid item xs={3}>
      <TextField
        id="mm"
        label="Month"
        variant="outlined"
        size="small"
        fullWidth
        value={month}
        onChange={(e) => setMonth(e.target.value)}
        InputLabelProps={{ style: { fontSize: '14px' } }}
      />
    </Grid>
    <Grid item xs={3}>
      <TextField
        id="yyyy"
        label="Year"
        variant="outlined"
        size="small"
        fullWidth
        value={year}
        onChange={(e) => setYear(e.target.value)}
        InputLabelProps={{ style: { fontSize: '14px' } }}
      />
    </Grid>
    <Grid item xs={12} sm={3}>
            <FormControl variant="outlined" size="small" fullWidth>
              <InputLabel id="genderLabel">Gender</InputLabel>
              <Select
                labelId="genderLabel"
                id="gender"
                value={invoiceData.Inv_Gender || ''}
                
                onChange={(e) => setGender(e.target.value)}
                label="Gender"
              >
                <MenuItem value=""><em>None</em></MenuItem>
                <MenuItem value={`${invoiceData.Inv_Gender}`}>
        {`${invoiceData.Inv_Gender}`}</MenuItem>
              </Select>
            </FormControl>
          
          </Grid>
         
  </Grid>
  <Grid item xs={12} sm={4}>
            <TextField
              id="dob"
              label="Date of Birth"
              type="date"
              variant="outlined"
              size="small"
              fullWidth
              value={invoiceData.Inv_Dob || ''}
              onChange={(e) => setDob(e.target.value)}
              InputLabelProps={{ shrink: true, style: { fontSize: '14px' } }}
            />
          </Grid> 
            <Grid item xs={12} sm={6}>
              <TextField
                id="phone1"
                label="Phone1"
                variant="outlined"
                size="small"
                fullWidth
                value={phone1}
                onChange={(e) => {setPhone1(e.target.value)
                    setIsPhone1Valid(true)
                }}
                InputLabelProps={{ style: { fontSize: '14px' } }}
                error={!isPhone1Valid} // Apply error style if email is invalid
                helperText={!isPhone1Valid ? "Invalid Phone number" : ""} 
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                id="phone2"
                label="Phone2"
                variant="outlined"
                size="small"
                fullWidth
                value={phone2}
                onChange={(e) => {setPhone2(e.target.value)
                    setIsPhone2Valid(true)
                }}
                InputLabelProps={{ style: { fontSize: '14px' } }}
                error={!isPhone2Valid} // Apply error style if email is invalid
                helperText={!isPhone2Valid ? "Invalid Phone number" : ""} 
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                id="email"
                label="Email"
                variant="outlined"
                size="small"
                fullWidth
                value={email}
                onChange={(e) => {
                  setEmail(e.target.value);
                  setIsEmailValid(true); // Reset email validation on change
                }}
                InputLabelProps={{ style: { fontSize: '14px' } }}
                error={!isEmailValid} // Apply error style if email is invalid
                helperText={!isEmailValid ? "Invalid email address" : ""} // Display error message
              />
            </Grid>   <Grid item xs={12} sm={6}>
            <TextField
              id="nationality"
              label="Nationality"
              variant="outlined"
              size="small"
              fullWidth
              value={nationality}
              onChange={(e) => setNationality(e.target.value)}
              InputLabelProps={{ style: { fontSize: '14px' } }}
            />
          </Grid>
          <Grid item xs={12} sm={12}>
            <TextField
              id="address"
              label="Address"
              variant="outlined"
              size="small"
              fullWidth
              value={address}
              onChange={(e) => setAddress(e.target.value)}
              InputLabelProps={{ style: { fontSize: '14px' } }}
            />
          </Grid>
          
            {/* Add more fields for other data */}
          </Grid>
        </Box>
      )}
       <ToastContainer />
    </Box>
  );
}

export default Edit;